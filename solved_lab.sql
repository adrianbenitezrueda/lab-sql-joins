USE sakila;

-- LAB JOIN SQL

-- CHALLENGE- Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1/ List the number of films per category.
SELECT sca.name AS category_name, COUNT(sfc.film_id) AS total_films
FROM sakila.category AS sca
JOIN sakila.film_category AS sfc ON sca.category_id = sfc.category_id
JOIN sakila.film AS sfi ON sfc.film_id = sfi.film_id
GROUP BY category_name;

-- 2/ Retrieve the store ID, city, and country for each store.
SELECT sst.store_id, sci.city, sco.country
FROM sakila.store AS sst
JOIN sakila.address AS sad ON sst.address_id = sad.address_id
JOIN sakila.city AS sci ON sad.city_id = sci.city_id
JOIN sakila.country AS sco ON sci.country_id = sco.country_id;
-- GROUP BY sst.store_id; -- NO ES NECESARIO PORQUE NO HAY FUNCIÃ“N

-- 3/ Calculate the total revenue generated by each store in dollars.
SELECT sst.store_id, SUM(spa.amount) AS total_amount
FROM sakila.store AS sst
JOIN sakila.staff AS sta ON sst.store_id = sta.store_id
JOIN sakila.payment AS spa ON sta.staff_id = spa.staff_id
GROUP BY sst.store_id;

-- 4/ Determine the average running time of films for each category.
SELECT sca.name AS category_name, ROUND(AVG(sfi.length),2) AS average_running_time
FROM sakila.category AS sca
JOIN sakila.film_category AS sfc ON sca.category_id = sfc.category_id
JOIN sakila.film AS sfi ON sfc.film_id = sfi.film_id
GROUP BY category_name;

-- **BONUS**
-- 5/ Identify the film categories with the longest average running time.
SELECT sca.name AS category_name, ROUND(AVG(sfi.length),2) AS average_running_time
FROM sakila.category AS sca
JOIN sakila.film_category AS sfc ON sca.category_id = sfc.category_id
JOIN sakila.film AS sfi ON sfc.film_id = sfi.film_id
GROUP BY category_name
ORDER BY average_running_time DESC;

-- 6/ Display the top 10 most frequently rented movies in descending order.
SELECT sfi.title AS film_title, COUNT(sre.rental_id) AS rental_count
FROM sakila.film AS sfi
JOIN sakila.inventory AS sinv ON sfi.film_id = sinv.film_id
JOIN sakila.rental AS sre ON sinv.inventory_id = sre.inventory_id
GROUP BY film_title
ORDER BY rental_count DESC
LIMIT 10;

-- 7/ Determine if "Academy Dinosaur" can be rented from Store 1
SELECT CASE
	WHEN count(sinv.inventory_id) > 0 THEN "Yes"
    ELSE "NO"
END AS "Is available Academy Dinosaur?"
FROM sakila.inventory AS sinv
JOIN sakila.film AS sfi ON sinv.film_id = sfi.film_id
WHERE sfi.title = "Academy Dinosaur" AND sinv.store_id = 1;

